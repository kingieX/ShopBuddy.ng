generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    Int       @unique // Unique one-to-one relation with User
  user      User      @relation(fields: [userId], references: [id])
  products  WishlistProduct[] // Many-to-many relation with Product through WishlistProduct
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("wishlists")
}

model WishlistProduct {
  id         String   @id @default(uuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  @@unique([wishlistId, productId]) // Ensure a product can only appear once in a wishlist
  @@map("wishlist_products")
}

model Product {
  id            String    @id @default(uuid()) // Use UUID for id
  title         String
  description   String
  mainImage     String
  galleryImages String[]
  regularPrice  Float
  salePrice     Float?
  status        String
  categoryId    String    @map("category_id")// Foreign key to Category
  category      Category  @relation(fields: [categoryId], references: [id]) // Relation to Category
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  wishlists     WishlistProduct[] // Relation to WishlistProduct

  @@map("products") // Map table name to "products"
}

model Category {
  id        String    @id @default(uuid()) // Use UUID for id
  name      String    @unique
  products  Product[] // No 'fields' or 'references' needed here
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories") // Map table name to "categories"
}

model Promotion {
  id           String   @id @default(uuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  imageUrl     String
  status       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                Int      @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String   @unique
  phoneNumber       String?
  password          String
  location          String?
  emailVerified     Boolean  @default(false)
  verificationToken String?
  resetToken        String?  // The reset token for password reset
  resetTokenExpiry  DateTime? // Token expiry time
  wishlist          Wishlist? // One-to-one relation with Wishlist
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
