
// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    Int       @unique // Unique one-to-one relation with User
  user      User      @relation(fields: [userId], references: [id])
  products  WishlistProduct[] // Many-to-many relation with Product through WishlistProduct
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("wishlists")
}

model WishlistProduct {
  id         String   @id @default(uuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  @@unique([wishlistId, productId]) // Ensure a product can only appear once in a wishlist
  @@map("wishlist_products")
}

model Product {
  id            String    @id @default(uuid()) // Use UUID for id
  title         String
  description   String
  mainImage     String
  galleryImages String[]
  regularPrice  Float
  salePrice     Float?
  status        String
  categoryId    String    @map("category_id")// Foreign key to Category
  category      Category  @relation(fields: [categoryId], references: [id]) // Relation to Category
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  wishlists     WishlistProduct[] // Relation to WishlistProduct
  cartItems     CartItem[] // Relation to CartItem

  @@map("products") // Map table name to "products"
  OrderItem OrderItem[]
}

model Category {
  id        String    @id @default(uuid()) // Use UUID for id
  name      String    @unique
  products  Product[] // No 'fields' or 'references' needed here
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories") // Map table name to "categories"
}

model Cart {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id]) // Each cart is tied to a user
  userId    Int        @unique
  items     CartItem[]  // A cart contains multiple CartItems
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("carts")
}

model CartItem {
  id        String    @id @default(uuid())
  product   Product   @relation(fields: [productId], references: [id]) // Each CartItem refers to a product
  productId String
  cart      Cart      @relation(fields: [cartId], references: [id]) // Each CartItem is part of a cart
  cartId    String
  quantity  Int       @default(1) // Track the quantity of products in the cart
  createdAt DateTime  @default(now())

  @@unique([cartId, productId]) // Ensure a product appears only once in a cart
  @@map("cart_items")
}

model Promotion {
  id           String   @id @default(uuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  imageUrl     String
  status       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}


model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  approved  Boolean  @default(false)            // Track approval status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id                Int      @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String   @unique
  phoneNumber       String?
  password          String
  location          String?
  emailVerified     Boolean  @default(false)
  verificationToken String?
  resetToken        String?  // The reset token for password reset
  resetTokenExpiry  DateTime? // Token expiry time
  wishlist          Wishlist? // One-to-one relation with Wishlist
  carts             Cart[]   // One-to-many relation with Cart (each user can have multiple carts)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  Order Order[]

  BillingDetails BillingDetails[]
}

// BillingDetails model for capturing each order's billing information
model BillingDetails {
  id         String   @id @default(uuid())
  fullname   String
  email      String
  phone      String
  address    String
  city       String
  state      String
  userId    Int 
   user      User @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  Order Order[]
}

// Order and OrderItem models to represent finalized orders and their items
model Order {
  id                String         @id @default(uuid())
  user              User           @relation(fields: [userId], references: [id])
  userId            Int
  billingDetailsId  String
  billingDetails    BillingDetails @relation(fields: [billingDetailsId], references: [id])
  totalAmount       Float
  deliveryFee       Float
  vat               Float
  status            OrderStatus    @default(PENDING)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  items             OrderItem[]
  payment           Payment?
}

model OrderItem {
  id           String    @id @default(uuid())
  order        Order     @relation(fields: [orderId], references: [id])
  orderId      String
  product      Product   @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int       @default(1)
  price        Float
  createdAt    DateTime  @default(now())
}

// Payment model for managing payment status and transactions
model Payment {
  id             String        @id @default(uuid())
  orderId        String        @unique
  order          Order         @relation(fields: [orderId], references: [id])
  amount         Float
  transactionRef String        @unique
  status         PaymentStatus @default(PENDING)
  createdAt      DateTime      @default(now())
}

// Enum for order status tracking
enum OrderStatus {
  PENDING
  PAID
  INPROGRESS
  SHIPPED
  DELIVERED
  CANCELED
}

// Enum for payment status tracking
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}